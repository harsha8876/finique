{"ast":null,"code":"const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst oracledb = require('oracledb');\nconst Cookies = require('js-cookie');\nconst app = express();\napp.use(express.json());\n\n// Database connection settings\nconst dbConfig = {\n  user: 'your_db_user',\n  password: 'your_db_password',\n  connectString: 'your_db_connect_string'\n};\n\n// Middleware for token validation\nconst authenticateToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  if (!token) return res.status(401).send('Access Denied');\n  jwt.verify(token, 'your_jwt_secret_key', (err, user) => {\n    if (err) return res.status(403).send('Invalid Token');\n    req.user = user;\n    next();\n  });\n};\n\n// Recharge API endpoint\napp.post('/api/recharge/process', authenticateToken, async (req, res) => {\n  const {\n    mobileNumber,\n    operator,\n    circle,\n    amount,\n    plan\n  } = req.body;\n\n  // Get email from cookies (this should be set on the frontend during login)\n  const email = req.cookies.email;\n  if (!email) {\n    return res.status(401).json({\n      message: 'User not authenticated. Please login again.'\n    });\n  }\n  let connection;\n  try {\n    // Connect to the database\n    connection = await oracledb.getConnection(dbConfig);\n\n    // 1. Fetch user ID based on email from the `users` table\n    const userResult = await connection.execute(`SELECT ID FROM users WHERE EMAIL = :email`, [email], {\n      outFormat: oracledb.OUT_FORMAT_OBJECT\n    });\n    if (userResult.rows.length === 0) {\n      return res.status(404).json({\n        message: 'User not found.'\n      });\n    }\n    const userId = userResult.rows[0].ID;\n\n    // 2. Fetch balance from the `accounts` table based on user ID\n    const accountResult = await connection.execute(`SELECT BALANCE FROM accounts WHERE USER_ID = :userId`, [userId], {\n      outFormat: oracledb.OUT_FORMAT_OBJECT\n    });\n    if (accountResult.rows.length === 0) {\n      return res.status(404).json({\n        message: 'Account not found.'\n      });\n    }\n    const currentBalance = accountResult.rows[0].BALANCE;\n\n    // 3. Check if user has enough balance\n    if (currentBalance < amount) {\n      return res.status(400).json({\n        message: 'Insufficient balance!'\n      });\n    }\n\n    // 4. Deduct the recharge amount from the balance\n    const updatedBalance = currentBalance - amount;\n\n    // 5. Update the balance in the `accounts` table\n    await connection.execute(`UPDATE accounts SET BALANCE = :updatedBalance WHERE USER_ID = :userId`, [updatedBalance, userId]);\n\n    // Commit the transaction\n    await connection.commit();\n\n    // Send a success response\n    res.json({\n      message: 'Recharge successful!',\n      updatedBalance: updatedBalance\n    });\n  } catch (err) {\n    console.error('Error during recharge:', err);\n    res.status(500).json({\n      message: 'Server error. Please try again later.'\n    });\n  } finally {\n    if (connection) {\n      try {\n        // Close the database connection\n        await connection.close();\n      } catch (err) {\n        console.error('Error closing connection:', err);\n      }\n    }\n  }\n});\n\n// Start the server\napp.listen(5000, () => {\n  console.log('Server is running on port 5000');\n});","map":{"version":3,"names":["express","require","jwt","oracledb","Cookies","app","use","json","dbConfig","user","password","connectString","authenticateToken","req","res","next","token","header","replace","status","send","verify","err","post","mobileNumber","operator","circle","amount","plan","body","email","cookies","message","connection","getConnection","userResult","execute","outFormat","OUT_FORMAT_OBJECT","rows","length","userId","ID","accountResult","currentBalance","BALANCE","updatedBalance","commit","console","error","close","listen","log"],"sources":["D:/finique/frontend/src/pages/Recharge/Recharge.jsx"],"sourcesContent":["const express = require('express');\r\nconst jwt = require('jsonwebtoken');\r\nconst oracledb = require('oracledb');\r\nconst Cookies = require('js-cookie');\r\nconst app = express();\r\n\r\napp.use(express.json());\r\n\r\n// Database connection settings\r\nconst dbConfig = {\r\n  user: 'your_db_user',\r\n  password: 'your_db_password',\r\n  connectString: 'your_db_connect_string'\r\n};\r\n\r\n// Middleware for token validation\r\nconst authenticateToken = (req, res, next) => {\r\n  const token = req.header('Authorization').replace('Bearer ', '');\r\n  if (!token) return res.status(401).send('Access Denied');\r\n\r\n  jwt.verify(token, 'your_jwt_secret_key', (err, user) => {\r\n    if (err) return res.status(403).send('Invalid Token');\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\n// Recharge API endpoint\r\napp.post('/api/recharge/process', authenticateToken, async (req, res) => {\r\n  const { mobileNumber, operator, circle, amount, plan } = req.body;\r\n\r\n  // Get email from cookies (this should be set on the frontend during login)\r\n  const email = req.cookies.email;\r\n\r\n  if (!email) {\r\n    return res.status(401).json({ message: 'User not authenticated. Please login again.' });\r\n  }\r\n\r\n  let connection;\r\n\r\n  try {\r\n    // Connect to the database\r\n    connection = await oracledb.getConnection(dbConfig);\r\n\r\n    // 1. Fetch user ID based on email from the `users` table\r\n    const userResult = await connection.execute(\r\n      `SELECT ID FROM users WHERE EMAIL = :email`,\r\n      [email],\r\n      { outFormat: oracledb.OUT_FORMAT_OBJECT }\r\n    );\r\n\r\n    if (userResult.rows.length === 0) {\r\n      return res.status(404).json({ message: 'User not found.' });\r\n    }\r\n\r\n    const userId = userResult.rows[0].ID;\r\n\r\n    // 2. Fetch balance from the `accounts` table based on user ID\r\n    const accountResult = await connection.execute(\r\n      `SELECT BALANCE FROM accounts WHERE USER_ID = :userId`,\r\n      [userId],\r\n      { outFormat: oracledb.OUT_FORMAT_OBJECT }\r\n    );\r\n\r\n    if (accountResult.rows.length === 0) {\r\n      return res.status(404).json({ message: 'Account not found.' });\r\n    }\r\n\r\n    const currentBalance = accountResult.rows[0].BALANCE;\r\n\r\n    // 3. Check if user has enough balance\r\n    if (currentBalance < amount) {\r\n      return res.status(400).json({ message: 'Insufficient balance!' });\r\n    }\r\n\r\n    // 4. Deduct the recharge amount from the balance\r\n    const updatedBalance = currentBalance - amount;\r\n\r\n    // 5. Update the balance in the `accounts` table\r\n    await connection.execute(\r\n      `UPDATE accounts SET BALANCE = :updatedBalance WHERE USER_ID = :userId`,\r\n      [updatedBalance, userId]\r\n    );\r\n\r\n    // Commit the transaction\r\n    await connection.commit();\r\n\r\n    // Send a success response\r\n    res.json({\r\n      message: 'Recharge successful!',\r\n      updatedBalance: updatedBalance\r\n    });\r\n\r\n  } catch (err) {\r\n    console.error('Error during recharge:', err);\r\n    res.status(500).json({ message: 'Server error. Please try again later.' });\r\n  } finally {\r\n    if (connection) {\r\n      try {\r\n        // Close the database connection\r\n        await connection.close();\r\n      } catch (err) {\r\n        console.error('Error closing connection:', err);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(5000, () => {\r\n  console.log('Server is running on port 5000');\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAc,CAAC;AACnC,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMG,OAAO,GAAGH,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AAErBK,GAAG,CAACC,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,cAAc;EACpBC,QAAQ,EAAE,kBAAkB;EAC5BC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC5C,MAAMC,KAAK,GAAGH,GAAG,CAACI,MAAM,CAAC,eAAe,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EAChE,IAAI,CAACF,KAAK,EAAE,OAAOF,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;EAExDlB,GAAG,CAACmB,MAAM,CAACL,KAAK,EAAE,qBAAqB,EAAE,CAACM,GAAG,EAAEb,IAAI,KAAK;IACtD,IAAIa,GAAG,EAAE,OAAOR,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;IACrDP,GAAG,CAACJ,IAAI,GAAGA,IAAI;IACfM,IAAI,CAAC,CAAC;EACR,CAAC,CAAC;AACJ,CAAC;;AAED;AACAV,GAAG,CAACkB,IAAI,CAAC,uBAAuB,EAAEX,iBAAiB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvE,MAAM;IAAEU,YAAY;IAAEC,QAAQ;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAGf,GAAG,CAACgB,IAAI;;EAEjE;EACA,MAAMC,KAAK,GAAGjB,GAAG,CAACkB,OAAO,CAACD,KAAK;EAE/B,IAAI,CAACA,KAAK,EAAE;IACV,OAAOhB,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAA8C,CAAC,CAAC;EACzF;EAEA,IAAIC,UAAU;EAEd,IAAI;IACF;IACAA,UAAU,GAAG,MAAM9B,QAAQ,CAAC+B,aAAa,CAAC1B,QAAQ,CAAC;;IAEnD;IACA,MAAM2B,UAAU,GAAG,MAAMF,UAAU,CAACG,OAAO,CACzC,2CAA2C,EAC3C,CAACN,KAAK,CAAC,EACP;MAAEO,SAAS,EAAElC,QAAQ,CAACmC;IAAkB,CAC1C,CAAC;IAED,IAAIH,UAAU,CAACI,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO1B,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;QAAEyB,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC7D;IAEA,MAAMS,MAAM,GAAGN,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAACG,EAAE;;IAEpC;IACA,MAAMC,aAAa,GAAG,MAAMV,UAAU,CAACG,OAAO,CAC5C,sDAAsD,EACtD,CAACK,MAAM,CAAC,EACR;MAAEJ,SAAS,EAAElC,QAAQ,CAACmC;IAAkB,CAC1C,CAAC;IAED,IAAIK,aAAa,CAACJ,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACnC,OAAO1B,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;QAAEyB,OAAO,EAAE;MAAqB,CAAC,CAAC;IAChE;IAEA,MAAMY,cAAc,GAAGD,aAAa,CAACJ,IAAI,CAAC,CAAC,CAAC,CAACM,OAAO;;IAEpD;IACA,IAAID,cAAc,GAAGjB,MAAM,EAAE;MAC3B,OAAOb,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;QAAEyB,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;;IAEA;IACA,MAAMc,cAAc,GAAGF,cAAc,GAAGjB,MAAM;;IAE9C;IACA,MAAMM,UAAU,CAACG,OAAO,CACtB,uEAAuE,EACvE,CAACU,cAAc,EAAEL,MAAM,CACzB,CAAC;;IAED;IACA,MAAMR,UAAU,CAACc,MAAM,CAAC,CAAC;;IAEzB;IACAjC,GAAG,CAACP,IAAI,CAAC;MACPyB,OAAO,EAAE,sBAAsB;MAC/Bc,cAAc,EAAEA;IAClB,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,GAAG,EAAE;IACZ0B,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAE3B,GAAG,CAAC;IAC5CR,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAAwC,CAAC,CAAC;EAC5E,CAAC,SAAS;IACR,IAAIC,UAAU,EAAE;MACd,IAAI;QACF;QACA,MAAMA,UAAU,CAACiB,KAAK,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAO5B,GAAG,EAAE;QACZ0B,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAE3B,GAAG,CAAC;MACjD;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACAjB,GAAG,CAAC8C,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBH,OAAO,CAACI,GAAG,CAAC,gCAAgC,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}